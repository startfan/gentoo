Kconfig in U-Boot
=================

This document describes the configuration infrastructure of U-Boot.
本文档介绍了U-Boot的配置基础结构。
The conventional configuration was replaced by Kconfig at v2014.10-rc1 release.
在v2014.10-rc1版本中，常规配置已被Kconfig取代。

Language Specification
----------------------

Kconfig起源于Linux内核。
See the file "Documentation/kbuild/kconfig*.txt" in your Linux Kernel source directory for a basic specification of Kconfig.
有关Kconfig的基本规范，请参见Linux内核源目录中的文件“ Documentation / kbuild / kconfig * .txt”。

Difference from Linux's Kconfig
-------------------------------

Here are some worth-mentioning configuration targets.
这里是一些值得一提的配置目标。
- silentoldconfig

  This target updates .config, include/generated/autoconf.h and include/configs/* as in Linux.  In U-Boot, it also does the following for the compatibility with the old configuration system:
此目标像在Linux中一样更新.config，include / generated / autoconf.h和include / configs / *。此目标将更新.config，在U-Boot中，它还会执行以下操作以与旧配置系统兼容：
   * create a symbolic link "arch/${ARCH}/include/asm/arch" pointing to  the SoC/CPU specific header directory
   创建一个指向SoC / CPU特定标头目录的符号链接“ arch / $ {ARCH} / include / asm / arch”
   * create include/config.h
   * create include/autoconf.mk
   * create spl/include/autoconf.mk (SPL and TPL only)
   * create tpl/include/autoconf.mk (TPL only)

   If we could completely switch to Kconfig in a long run (i.e. remove all the include/configs/*.h), those additional processings above would be removed.
如果从长远来看我们可以完全切换到Kconfig（即删除所有include / configs / *。h），则上面的那些附加处理将被删除。
- defconfig

  In U-Boot, "make defconfig" is a shorthand of "make sandbox_defconfig"
在U-Boot中，“ make defconfig”是“ make sandbox_defconfig”的简写。
- <board>_defconfig

  Now it works as in Linux.
  The prefixes such as "+S:" in *_defconfig are deprecated.
  You can simply remove the prefixes.  Do not add them for new boards.
现在它可以在Linux中使用。 * _defconfig中的前缀，例如“ + S：”已被弃用。 您可以简单地删除前缀。不要为新板添加它们。
- <board>_config

  This does not exist in Linux's Kconfig.
  "make <board>_config" works the same as "make <board>_defconfig".
  Prior to Kconfig, in U-Boot, "make <board>_config" was used for the configuration.  It is still supported for backward compatibility, so  we do not need to update the distro recipes.
这在Linux的Kconfig中不存在。 “ make <board> _config”的工作方式与“ make <board> _defconfig”相同。 在Kconfig之前，在U-Boot中，“ make <board> _config”用于配置。仍支持向后兼容，因此我们不需要更新发行版配方。

The other configuration targets work as in Linux Kernel.
其他配置目标与Linux内核中的工作方式相同。

Migration steps to Kconfig
迁移到Kconfig的步骤
--------------------------

Prior to Kconfig, the C preprocessor based board configuration had been used in U-Boot.
在Kconfig之前，基于C预处理器的电路板配置已在U-Boot中使用。
Although Kconfig was introduced and some configs have been moved to Kconfig,many of configs are still defined in C header files. 
尽管引入了Kconfig并且一些配置已移至Kconfig，但是许多配置仍在C头文件中定义。
 It will take a very long term to move all of them to Kconfig.  In the interim, the two different configuration infrastructures should coexist.
将它们全部移至Kconfig需要很长时间。在此期间，两个不同的配置基础结构应共存。
The configuration files are generated by both Kconfig and the old preprocessor based configuration as follows:
配置文件由Kconfig和旧的基于预处理器的配置生成，如下所示：
Configuration files for use in C sources
在C源代码中使用的配置文件
  - include/generated/autoconf.h     (由Kconfig为正常生成)
  - include/configs/<board>.h        (exists for all boards所有板子都存在)

Configuration file for use in makefiles
用于makefile中的配置文件
  - include/config/auto.conf         (generated by Kconfig由Kconfig生成)
  - include/autoconf.mk              (generated by the old config for Normal由旧配置生成的“正常”)
  - spl/include/autoconfig.mk        (generated by the old config for SPL由旧的SPL配置生成)
  - tpl/include/autoconfig.mk        (generated by the old config for TPL由旧的TPL配置生成)

When adding a new CONFIG macro, it is highly recommended to add it to Kconfig rather than to a header file.
添加新的CONFIG宏时，强烈建议将其添加到Kconfig而不是头文件中。

Conversion from boards.cfg to Kconfig
从boards.cfg到Kconfig的转换
-------------------------------------

Prior to Kconfig, boards.cfg was a primary database that contained Arch, CPU,SoC, etc. of all the supported boards. 
在Kconfig之前，boards.cfg是一个主数据库，其中包含所有受支持板卡的Arch，CPU，SoC等。
It was deleted when switching to Kconfig.  Each field of boards.cfg was converted as follows:
 切换到Kconfig时将其删除。 board.cfg的每个字段的转换如下：
 Status      ->  "S:" entry of MAINTAINERS
 Arch        ->  CONFIG_SYS_ARCH defined by Kconfig
 CPU         ->  CONFIG_SYS_CPU defined by Kconfig
 SoC         ->  CONFIG_SYS_SOC defined by Kconfig
 Vendor      ->  CONFIG_SYS_VENDOR defined by Kconfig
 Board       ->  CONFIG_SYS_BOARD defined by Kconfig
 Target      ->  File name of defconfig (configs/<target>_defconfig)
 Options     ->  CONFIG_SYS_EXTRA_OPTIONS defined by Kconfig
 Maintainers ->  "M:" entry of MAINTAINERS


Tips to add/remove boards
-------------------------

When adding a new board, the following steps are generally needed:
添加新板卡时，通常需要执行以下步骤：
 [1] Add a header file include/configs/<target>.h
 [2] Make sure to define necessary CONFIG_SYS_* in Kconfig:
 确保在Kconfig中定义必要的CONFIG_SYS_ *：
       Define CONFIG_SYS_CPU="cpu" to compile arch/<arch>/cpu/<cpu>
       Define CONFIG_SYS_SOC="soc" to compile arch/<arch>/cpu/<cpu>/<soc>
       Define CONFIG_SYS_VENDOR="vendor" to compile board/<vendor>/common/*
         and board/<vendor>/<board>/*
       Define CONFIG_SYS_BOARD="board" to compile board/<board>/*
         (or board/<vendor>/<board>/* if CONFIG_SYS_VENDOR is defined)
       Define CONFIG_SYS_CONFIG_NAME="target" to include
         include/configs/<target>.h
 [3] Add a new entry to the board select menu in Kconfig.
 在Kconfig中的板选择菜单中添加一个新条目。
     The board select menu is located in arch/<arch>/Kconfig or arch/<arch>/*/Kconfig.
     板选择菜单位于arch / <arch> / Kconfig或arch / <arch> / * / Kconfig中。
 [4] Add a MAINTAINERS file维护者
     It is generally placed at board/<board>/MAINTAINERS or board/<vendor>/<board>/MAINTAINERS
它通常放置在board / <board> / MAINTAINERS或board / <vendor> / <board> / MAINTAINERS
 [5] Add configs/<target>_defconfig

When removing an obsolete board, the following steps are generally needed:
卸下陈旧的板时，通常需要执行以下步骤：
 [1] Remove configs/<target>_defconfig
 [2] Remove include/configs/<target>.h if it is not used by any other boards
 [2]如果其他板未使用include / configs / <target> .h，则将其删除
 [3] Remove board/<vendor>/<board>/* or board/<board>/* if it is not used by any other boards
[3]卸下板/ <供应商> / <板> / *或板/ <板> / *（如果其他板未使用它）
 [4] Update MAINTAINERS if necessary
 [4]如有必要，更新维护者
 [5] Remove the unused entry from the board select menu in Kconfig
 [5]从Kconfig中的板选择菜单中删除未使用的条目
 [6] Add an entry to doc/README.scrapyard
 [6]在doc / README.scrapyard中添加一个条目

TODO
----

- The option field of boards.cfg, which was used for the pre-Kconfig configuration, moved to CONFIG_SYS_EXTRA_OPTIONS verbatim now.
现在，用于Kconfig之前的配置的boards.cfg的选项字段立即移至CONFIG_SYS_EXTRA_OPTIONS。
  Board maintainers are expected to implement proper Kconfig options and switch over to them.  Eventually CONFIG_SYS_EXTRA_OPTIONS will go away.
  电路板维护人员应实施适当的Kconfig选项并切换到它们。最终，CONFIG_SYS_EXTRA_OPTIONS将消失。
  CONFIG_SYS_EXTRA_OPTIONS should not be used for new boards.
CONFIG_SYS_EXTRA_OPTIONS不应用于新板。
- In the pre-Kconfig, a single board had multiple entries in the boards.cfg file with differences in the option fields.  
在Kconfig之前的版本中，单个电路板在boards.cfg文件中具有多个条目，但选项字段有所不同。
The corresponding defconfig files were auto-generated when switching to Kconfig.  
切换到Kconfig时会自动生成相应的defconfig文件。
Now we have too many defconfig files compared with the number of the supported boards.  
与支持的板卡数量相比，现在我们的defconfig文件太多了。
It is recommended to have only one defconfig per board and allow users to select the config options.
建议每块板只有一个defconfig，并允许用户选择配置选项。
- Move the config macros in header files to Kconfig. 
将头文件中的配置宏移动到Kconfig。
 When we move at least macros used in makefiles, we can drop include/autoconfig.mk, which makes the build scripts much simpler.
当我们至少移动makefile中使用的宏时，可以删除include / autoconfig.mk，这使构建脚本更加简单。